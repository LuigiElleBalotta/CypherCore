// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/rpc_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/rpc_types.proto</summary>
  public static partial class RpcTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/rpc_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFiZ3MvbG93L3BiL2NsaWVudC9ycGNfdHlwZXMucHJvdG8SDGJncy5wcm90",
            "b2NvbBo3YmdzL2xvdy9wYi9jbGllbnQvZ2xvYmFsX2V4dGVuc2lvbnMvZmll",
            "bGRfb3B0aW9ucy5wcm90bxo4YmdzL2xvdy9wYi9jbGllbnQvZ2xvYmFsX2V4",
            "dGVuc2lvbnMvbWV0aG9kX29wdGlvbnMucHJvdG8aOWJncy9sb3cvcGIvY2xp",
            "ZW50L2dsb2JhbF9leHRlbnNpb25zL21lc3NhZ2Vfb3B0aW9ucy5wcm90bxo5",
            "YmdzL2xvdy9wYi9jbGllbnQvZ2xvYmFsX2V4dGVuc2lvbnMvc2VydmljZV9v",
            "cHRpb25zLnByb3RvIg0KC05PX1JFU1BPTlNFIigKB0FkZHJlc3MSDwoHYWRk",
            "cmVzcxgBIAIoCRIMCgRwb3J0GAIgASgNIjMKCVByb2Nlc3NJZBIXCgVsYWJl",
            "bBgBIAIoDUIIivkrBBICEAASDQoFZXBvY2gYAiACKA0iTAoNT2JqZWN0QWRk",
            "cmVzcxIlCgRob3N0GAEgAigLMhcuYmdzLnByb3RvY29sLlByb2Nlc3NJZBIU",
            "CglvYmplY3RfaWQYAiABKAQ6ATAiCAoGTm9EYXRhInkKCUVycm9ySW5mbxIz",
            "Cg5vYmplY3RfYWRkcmVzcxgBIAIoCzIbLmJncy5wcm90b2NvbC5PYmplY3RB",
            "ZGRyZXNzEg4KBnN0YXR1cxgCIAIoDRIUCgxzZXJ2aWNlX2hhc2gYAyACKA0S",
            "EQoJbWV0aG9kX2lkGAQgAigNIi4KDEZhbm91dFRhcmdldBIRCgljbGllbnRf",
            "aWQYASABKAkSCwoDa2V5GAIgASgMIvUCCgZIZWFkZXISEgoKc2VydmljZV9p",
            "ZBgBIAIoDRIRCgltZXRob2RfaWQYAiABKA0SDQoFdG9rZW4YAyACKA0SFAoJ",
            "b2JqZWN0X2lkGAQgASgEOgEwEg8KBHNpemUYBSABKA06ATASEQoGc3RhdHVz",
            "GAYgASgNOgEwEiYKBWVycm9yGAcgAygLMhcuYmdzLnByb3RvY29sLkVycm9y",
            "SW5mbxIPCgd0aW1lb3V0GAggASgEEhMKC2lzX3Jlc3BvbnNlGAkgASgIEjAK",
            "D2ZvcndhcmRfdGFyZ2V0cxgKIAMoCzIXLmJncy5wcm90b2NvbC5Qcm9jZXNz",
            "SWQSFAoMc2VydmljZV9oYXNoGAsgASgHEhEKCWNsaWVudF9pZBgNIAEoCRIx",
            "Cg1mYW5vdXRfdGFyZ2V0GA4gAygLMhouYmdzLnByb3RvY29sLkZhbm91dFRh",
            "cmdldBIfChdjbGllbnRfaWRfZmFub3V0X3RhcmdldBgPIAMoCSLqAQoLS2Fm",
            "a2FIZWFkZXISFAoMc2VydmljZV9oYXNoGAEgASgHEhEKCW1ldGhvZF9pZBgC",
            "IAEoDRINCgV0b2tlbhgDIAEoDRIUCglvYmplY3RfaWQYBCABKAQ6ATASDwoE",
            "c2l6ZRgFIAEoDToBMBIRCgZzdGF0dXMYBiABKA06ATASDwoHdGltZW91dBgH",
            "IAEoBBIvCg5mb3J3YXJkX3RhcmdldBgIIAEoCzIXLmJncy5wcm90b2NvbC5Q",
            "cm9jZXNzSWQSFAoMcmV0dXJuX3RvcGljGAkgASgJEhEKCWNsaWVudF9pZBgL",
            "IAEoCUIZCg1ibmV0LnByb3RvY29sQghScGNQcm90b1AAUAFQAlAD"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.MethodOptionsReflection.Descriptor, global::Bgs.Protocol.MessageOptionsReflection.Descriptor, global::Bgs.Protocol.ServiceOptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.NO_RESPONSE), global::Bgs.Protocol.NO_RESPONSE.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Address), global::Bgs.Protocol.Address.Parser, new[]{ "Address_", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.ProcessId), global::Bgs.Protocol.ProcessId.Parser, new[]{ "Label", "Epoch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.ObjectAddress), global::Bgs.Protocol.ObjectAddress.Parser, new[]{ "Host", "ObjectId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.NoData), global::Bgs.Protocol.NoData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.ErrorInfo), global::Bgs.Protocol.ErrorInfo.Parser, new[]{ "ObjectAddress", "Status", "ServiceHash", "MethodId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.FanoutTarget), global::Bgs.Protocol.FanoutTarget.Parser, new[]{ "ClientId", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Header), global::Bgs.Protocol.Header.Parser, new[]{ "ServiceId", "MethodId", "Token", "ObjectId", "Size", "Status", "Error", "Timeout", "IsResponse", "ForwardTargets", "ServiceHash", "ClientId", "FanoutTarget", "ClientIdFanoutTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.KafkaHeader), global::Bgs.Protocol.KafkaHeader.Parser, new[]{ "ServiceHash", "MethodId", "Token", "ObjectId", "Size", "Status", "Timeout", "ForwardTarget", "ReturnTopic", "ClientId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NO_RESPONSE : pb::IMessage<NO_RESPONSE> {
    private static readonly pb::MessageParser<NO_RESPONSE> _parser = new pb::MessageParser<NO_RESPONSE>(() => new NO_RESPONSE());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NO_RESPONSE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NO_RESPONSE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NO_RESPONSE(NO_RESPONSE other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NO_RESPONSE Clone() {
      return new NO_RESPONSE(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NO_RESPONSE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NO_RESPONSE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NO_RESPONSE other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      _hasBits0 = other._hasBits0;
      address_ = other.address_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int Address_FieldNumber = 1;
    private readonly static string Address_DefaultValue = "";

    private string address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address_ {
      get { return address_ ?? Address_DefaultValue; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddress_ {
      get { return address_ != null; }
    }
    /// <summary>Clears the value of the "address" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddress_() {
      address_ = null;
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private readonly static uint PortDefaultValue = 0;

    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { if ((_hasBits0 & 1) != 0) { return port_; } else { return PortDefaultValue; } }
      set {
        _hasBits0 |= 1;
        port_ = value;
      }
    }
    /// <summary>Gets whether the "port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPort {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPort() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address_ != other.Address_) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAddress_) hash ^= Address_.GetHashCode();
      if (HasPort) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAddress_) {
        output.WriteRawTag(10);
        output.WriteString(Address_);
      }
      if (HasPort) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAddress_) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address_);
      }
      if (HasPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.HasAddress_) {
        Address_ = other.Address_;
      }
      if (other.HasPort) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address_ = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcessId : pb::IMessage<ProcessId> {
    private static readonly pb::MessageParser<ProcessId> _parser = new pb::MessageParser<ProcessId>(() => new ProcessId());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessId(ProcessId other) : this() {
      _hasBits0 = other._hasBits0;
      label_ = other.label_;
      epoch_ = other.epoch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessId Clone() {
      return new ProcessId(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private readonly static uint LabelDefaultValue = 0;

    private uint label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Label {
      get { if ((_hasBits0 & 1) != 0) { return label_; } else { return LabelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        label_ = value;
      }
    }
    /// <summary>Gets whether the "label" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLabel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "label" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLabel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 2;
    private readonly static uint EpochDefaultValue = 0;

    private uint epoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Epoch {
      get { if ((_hasBits0 & 2) != 0) { return epoch_; } else { return EpochDefaultValue; } }
      set {
        _hasBits0 |= 2;
        epoch_ = value;
      }
    }
    /// <summary>Gets whether the "epoch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpoch {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "epoch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpoch() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Epoch != other.Epoch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLabel) hash ^= Label.GetHashCode();
      if (HasEpoch) hash ^= Epoch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLabel) {
        output.WriteRawTag(8);
        output.WriteUInt32(Label);
      }
      if (HasEpoch) {
        output.WriteRawTag(16);
        output.WriteUInt32(Epoch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLabel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Label);
      }
      if (HasEpoch) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Epoch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessId other) {
      if (other == null) {
        return;
      }
      if (other.HasLabel) {
        Label = other.Label;
      }
      if (other.HasEpoch) {
        Epoch = other.Epoch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Label = input.ReadUInt32();
            break;
          }
          case 16: {
            Epoch = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectAddress : pb::IMessage<ObjectAddress> {
    private static readonly pb::MessageParser<ObjectAddress> _parser = new pb::MessageParser<ObjectAddress>(() => new ObjectAddress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddress(ObjectAddress other) : this() {
      _hasBits0 = other._hasBits0;
      host_ = other.HasHost ? other.host_.Clone() : null;
      objectId_ = other.objectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddress Clone() {
      return new ObjectAddress(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private global::Bgs.Protocol.ProcessId host_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ProcessId Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }
    /// <summary>Gets whether the host field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHost {
      get { return host_ != null; }
    }
    /// <summary>Clears the value of the host field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHost() {
      host_ = null;
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 2;
    private readonly static ulong ObjectIdDefaultValue = 0UL;

    private ulong objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjectId {
      get { if ((_hasBits0 & 1) != 0) { return objectId_; } else { return ObjectIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        objectId_ = value;
      }
    }
    /// <summary>Gets whether the "object_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjectId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "object_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Host, other.Host)) return false;
      if (ObjectId != other.ObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHost) hash ^= Host.GetHashCode();
      if (HasObjectId) hash ^= ObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasHost) {
        output.WriteRawTag(10);
        output.WriteMessage(Host);
      }
      if (HasObjectId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHost) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Host);
      }
      if (HasObjectId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectAddress other) {
      if (other == null) {
        return;
      }
      if (other.HasHost) {
        if (!HasHost) {
          Host = new global::Bgs.Protocol.ProcessId();
        }
        Host.MergeFrom(other.Host);
      }
      if (other.HasObjectId) {
        ObjectId = other.ObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasHost) {
              Host = new global::Bgs.Protocol.ProcessId();
            }
            input.ReadMessage(Host);
            break;
          }
          case 16: {
            ObjectId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoData : pb::IMessage<NoData> {
    private static readonly pb::MessageParser<NoData> _parser = new pb::MessageParser<NoData>(() => new NoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoData(NoData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoData Clone() {
      return new NoData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ErrorInfo : pb::IMessage<ErrorInfo> {
    private static readonly pb::MessageParser<ErrorInfo> _parser = new pb::MessageParser<ErrorInfo>(() => new ErrorInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorInfo(ErrorInfo other) : this() {
      _hasBits0 = other._hasBits0;
      objectAddress_ = other.HasObjectAddress ? other.objectAddress_.Clone() : null;
      status_ = other.status_;
      serviceHash_ = other.serviceHash_;
      methodId_ = other.methodId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorInfo Clone() {
      return new ErrorInfo(this);
    }

    /// <summary>Field number for the "object_address" field.</summary>
    public const int ObjectAddressFieldNumber = 1;
    private global::Bgs.Protocol.ObjectAddress objectAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ObjectAddress ObjectAddress {
      get { return objectAddress_; }
      set {
        objectAddress_ = value;
      }
    }
    /// <summary>Gets whether the object_address field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjectAddress {
      get { return objectAddress_ != null; }
    }
    /// <summary>Clears the value of the object_address field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectAddress() {
      objectAddress_ = null;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private readonly static uint StatusDefaultValue = 0;

    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "service_hash" field.</summary>
    public const int ServiceHashFieldNumber = 3;
    private readonly static uint ServiceHashDefaultValue = 0;

    private uint serviceHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceHash {
      get { if ((_hasBits0 & 2) != 0) { return serviceHash_; } else { return ServiceHashDefaultValue; } }
      set {
        _hasBits0 |= 2;
        serviceHash_ = value;
      }
    }
    /// <summary>Gets whether the "service_hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServiceHash {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "service_hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServiceHash() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "method_id" field.</summary>
    public const int MethodIdFieldNumber = 4;
    private readonly static uint MethodIdDefaultValue = 0;

    private uint methodId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MethodId {
      get { if ((_hasBits0 & 4) != 0) { return methodId_; } else { return MethodIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        methodId_ = value;
      }
    }
    /// <summary>Gets whether the "method_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethodId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "method_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethodId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectAddress, other.ObjectAddress)) return false;
      if (Status != other.Status) return false;
      if (ServiceHash != other.ServiceHash) return false;
      if (MethodId != other.MethodId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasObjectAddress) hash ^= ObjectAddress.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasServiceHash) hash ^= ServiceHash.GetHashCode();
      if (HasMethodId) hash ^= MethodId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasObjectAddress) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectAddress);
      }
      if (HasStatus) {
        output.WriteRawTag(16);
        output.WriteUInt32(Status);
      }
      if (HasServiceHash) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServiceHash);
      }
      if (HasMethodId) {
        output.WriteRawTag(32);
        output.WriteUInt32(MethodId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasObjectAddress) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectAddress);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (HasServiceHash) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceHash);
      }
      if (HasMethodId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MethodId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasObjectAddress) {
        if (!HasObjectAddress) {
          ObjectAddress = new global::Bgs.Protocol.ObjectAddress();
        }
        ObjectAddress.MergeFrom(other.ObjectAddress);
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasServiceHash) {
        ServiceHash = other.ServiceHash;
      }
      if (other.HasMethodId) {
        MethodId = other.MethodId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasObjectAddress) {
              ObjectAddress = new global::Bgs.Protocol.ObjectAddress();
            }
            input.ReadMessage(ObjectAddress);
            break;
          }
          case 16: {
            Status = input.ReadUInt32();
            break;
          }
          case 24: {
            ServiceHash = input.ReadUInt32();
            break;
          }
          case 32: {
            MethodId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FanoutTarget : pb::IMessage<FanoutTarget> {
    private static readonly pb::MessageParser<FanoutTarget> _parser = new pb::MessageParser<FanoutTarget>(() => new FanoutTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FanoutTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FanoutTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FanoutTarget(FanoutTarget other) : this() {
      clientId_ = other.clientId_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FanoutTarget Clone() {
      return new FanoutTarget(this);
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private readonly static string ClientIdDefaultValue = "";

    private string clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_ ?? ClientIdDefaultValue; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientId {
      get { return clientId_ != null; }
    }
    /// <summary>Clears the value of the "client_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientId() {
      clientId_ = null;
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private readonly static pb::ByteString KeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FanoutTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FanoutTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientId) hash ^= ClientId.GetHashCode();
      if (HasKey) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClientId) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      if (HasKey) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClientId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FanoutTarget other) {
      if (other == null) {
        return;
      }
      if (other.HasClientId) {
        ClientId = other.ClientId;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      _hasBits0 = other._hasBits0;
      serviceId_ = other.serviceId_;
      methodId_ = other.methodId_;
      token_ = other.token_;
      objectId_ = other.objectId_;
      size_ = other.size_;
      status_ = other.status_;
      error_ = other.error_.Clone();
      timeout_ = other.timeout_;
      isResponse_ = other.isResponse_;
      forwardTargets_ = other.forwardTargets_.Clone();
      serviceHash_ = other.serviceHash_;
      clientId_ = other.clientId_;
      fanoutTarget_ = other.fanoutTarget_.Clone();
      clientIdFanoutTarget_ = other.clientIdFanoutTarget_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 1;
    private readonly static uint ServiceIdDefaultValue = 0;

    private uint serviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceId {
      get { if ((_hasBits0 & 1) != 0) { return serviceId_; } else { return ServiceIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        serviceId_ = value;
      }
    }
    /// <summary>Gets whether the "service_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServiceId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "service_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServiceId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "method_id" field.</summary>
    public const int MethodIdFieldNumber = 2;
    private readonly static uint MethodIdDefaultValue = 0;

    private uint methodId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MethodId {
      get { if ((_hasBits0 & 2) != 0) { return methodId_; } else { return MethodIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        methodId_ = value;
      }
    }
    /// <summary>Gets whether the "method_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethodId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "method_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethodId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private readonly static uint TokenDefaultValue = 0;

    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { if ((_hasBits0 & 4) != 0) { return token_; } else { return TokenDefaultValue; } }
      set {
        _hasBits0 |= 4;
        token_ = value;
      }
    }
    /// <summary>Gets whether the "token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToken {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 4;
    private readonly static ulong ObjectIdDefaultValue = 0UL;

    private ulong objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjectId {
      get { if ((_hasBits0 & 8) != 0) { return objectId_; } else { return ObjectIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        objectId_ = value;
      }
    }
    /// <summary>Gets whether the "object_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjectId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "object_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { if ((_hasBits0 & 16) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private readonly static uint StatusDefaultValue = 0;

    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { if ((_hasBits0 & 32) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 32;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.ErrorInfo> _repeated_error_codec
        = pb::FieldCodec.ForMessage(58, global::Bgs.Protocol.ErrorInfo.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.ErrorInfo> error_ = new pbc::RepeatedField<global::Bgs.Protocol.ErrorInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.ErrorInfo> Error {
      get { return error_; }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 8;
    private readonly static ulong TimeoutDefaultValue = 0UL;

    private ulong timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timeout {
      get { if ((_hasBits0 & 64) != 0) { return timeout_; } else { return TimeoutDefaultValue; } }
      set {
        _hasBits0 |= 64;
        timeout_ = value;
      }
    }
    /// <summary>Gets whether the "timeout" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeout {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "timeout" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeout() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "is_response" field.</summary>
    public const int IsResponseFieldNumber = 9;
    private readonly static bool IsResponseDefaultValue = false;

    private bool isResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsResponse {
      get { if ((_hasBits0 & 128) != 0) { return isResponse_; } else { return IsResponseDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isResponse_ = value;
      }
    }
    /// <summary>Gets whether the "is_response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsResponse {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "is_response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsResponse() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "forward_targets" field.</summary>
    public const int ForwardTargetsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.ProcessId> _repeated_forwardTargets_codec
        = pb::FieldCodec.ForMessage(82, global::Bgs.Protocol.ProcessId.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.ProcessId> forwardTargets_ = new pbc::RepeatedField<global::Bgs.Protocol.ProcessId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.ProcessId> ForwardTargets {
      get { return forwardTargets_; }
    }

    /// <summary>Field number for the "service_hash" field.</summary>
    public const int ServiceHashFieldNumber = 11;
    private readonly static uint ServiceHashDefaultValue = 0;

    private uint serviceHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceHash {
      get { if ((_hasBits0 & 256) != 0) { return serviceHash_; } else { return ServiceHashDefaultValue; } }
      set {
        _hasBits0 |= 256;
        serviceHash_ = value;
      }
    }
    /// <summary>Gets whether the "service_hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServiceHash {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "service_hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServiceHash() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 13;
    private readonly static string ClientIdDefaultValue = "";

    private string clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_ ?? ClientIdDefaultValue; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientId {
      get { return clientId_ != null; }
    }
    /// <summary>Clears the value of the "client_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientId() {
      clientId_ = null;
    }

    /// <summary>Field number for the "fanout_target" field.</summary>
    public const int FanoutTargetFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.FanoutTarget> _repeated_fanoutTarget_codec
        = pb::FieldCodec.ForMessage(114, global::Bgs.Protocol.FanoutTarget.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.FanoutTarget> fanoutTarget_ = new pbc::RepeatedField<global::Bgs.Protocol.FanoutTarget>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.FanoutTarget> FanoutTarget {
      get { return fanoutTarget_; }
    }

    /// <summary>Field number for the "client_id_fanout_target" field.</summary>
    public const int ClientIdFanoutTargetFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_clientIdFanoutTarget_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> clientIdFanoutTarget_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClientIdFanoutTarget {
      get { return clientIdFanoutTarget_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceId != other.ServiceId) return false;
      if (MethodId != other.MethodId) return false;
      if (Token != other.Token) return false;
      if (ObjectId != other.ObjectId) return false;
      if (Size != other.Size) return false;
      if (Status != other.Status) return false;
      if(!error_.Equals(other.error_)) return false;
      if (Timeout != other.Timeout) return false;
      if (IsResponse != other.IsResponse) return false;
      if(!forwardTargets_.Equals(other.forwardTargets_)) return false;
      if (ServiceHash != other.ServiceHash) return false;
      if (ClientId != other.ClientId) return false;
      if(!fanoutTarget_.Equals(other.fanoutTarget_)) return false;
      if(!clientIdFanoutTarget_.Equals(other.clientIdFanoutTarget_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServiceId) hash ^= ServiceId.GetHashCode();
      if (HasMethodId) hash ^= MethodId.GetHashCode();
      if (HasToken) hash ^= Token.GetHashCode();
      if (HasObjectId) hash ^= ObjectId.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      hash ^= error_.GetHashCode();
      if (HasTimeout) hash ^= Timeout.GetHashCode();
      if (HasIsResponse) hash ^= IsResponse.GetHashCode();
      hash ^= forwardTargets_.GetHashCode();
      if (HasServiceHash) hash ^= ServiceHash.GetHashCode();
      if (HasClientId) hash ^= ClientId.GetHashCode();
      hash ^= fanoutTarget_.GetHashCode();
      hash ^= clientIdFanoutTarget_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasServiceId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServiceId);
      }
      if (HasMethodId) {
        output.WriteRawTag(16);
        output.WriteUInt32(MethodId);
      }
      if (HasToken) {
        output.WriteRawTag(24);
        output.WriteUInt32(Token);
      }
      if (HasObjectId) {
        output.WriteRawTag(32);
        output.WriteUInt64(ObjectId);
      }
      if (HasSize) {
        output.WriteRawTag(40);
        output.WriteUInt32(Size);
      }
      if (HasStatus) {
        output.WriteRawTag(48);
        output.WriteUInt32(Status);
      }
      error_.WriteTo(output, _repeated_error_codec);
      if (HasTimeout) {
        output.WriteRawTag(64);
        output.WriteUInt64(Timeout);
      }
      if (HasIsResponse) {
        output.WriteRawTag(72);
        output.WriteBool(IsResponse);
      }
      forwardTargets_.WriteTo(output, _repeated_forwardTargets_codec);
      if (HasServiceHash) {
        output.WriteRawTag(93);
        output.WriteFixed32(ServiceHash);
      }
      if (HasClientId) {
        output.WriteRawTag(106);
        output.WriteString(ClientId);
      }
      fanoutTarget_.WriteTo(output, _repeated_fanoutTarget_codec);
      clientIdFanoutTarget_.WriteTo(output, _repeated_clientIdFanoutTarget_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServiceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceId);
      }
      if (HasMethodId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MethodId);
      }
      if (HasToken) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (HasObjectId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      size += error_.CalculateSize(_repeated_error_codec);
      if (HasTimeout) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timeout);
      }
      if (HasIsResponse) {
        size += 1 + 1;
      }
      size += forwardTargets_.CalculateSize(_repeated_forwardTargets_codec);
      if (HasServiceHash) {
        size += 1 + 4;
      }
      if (HasClientId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      size += fanoutTarget_.CalculateSize(_repeated_fanoutTarget_codec);
      size += clientIdFanoutTarget_.CalculateSize(_repeated_clientIdFanoutTarget_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.HasServiceId) {
        ServiceId = other.ServiceId;
      }
      if (other.HasMethodId) {
        MethodId = other.MethodId;
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      if (other.HasObjectId) {
        ObjectId = other.ObjectId;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      error_.Add(other.error_);
      if (other.HasTimeout) {
        Timeout = other.Timeout;
      }
      if (other.HasIsResponse) {
        IsResponse = other.IsResponse;
      }
      forwardTargets_.Add(other.forwardTargets_);
      if (other.HasServiceHash) {
        ServiceHash = other.ServiceHash;
      }
      if (other.HasClientId) {
        ClientId = other.ClientId;
      }
      fanoutTarget_.Add(other.fanoutTarget_);
      clientIdFanoutTarget_.Add(other.clientIdFanoutTarget_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServiceId = input.ReadUInt32();
            break;
          }
          case 16: {
            MethodId = input.ReadUInt32();
            break;
          }
          case 24: {
            Token = input.ReadUInt32();
            break;
          }
          case 32: {
            ObjectId = input.ReadUInt64();
            break;
          }
          case 40: {
            Size = input.ReadUInt32();
            break;
          }
          case 48: {
            Status = input.ReadUInt32();
            break;
          }
          case 58: {
            error_.AddEntriesFrom(input, _repeated_error_codec);
            break;
          }
          case 64: {
            Timeout = input.ReadUInt64();
            break;
          }
          case 72: {
            IsResponse = input.ReadBool();
            break;
          }
          case 82: {
            forwardTargets_.AddEntriesFrom(input, _repeated_forwardTargets_codec);
            break;
          }
          case 93: {
            ServiceHash = input.ReadFixed32();
            break;
          }
          case 106: {
            ClientId = input.ReadString();
            break;
          }
          case 114: {
            fanoutTarget_.AddEntriesFrom(input, _repeated_fanoutTarget_codec);
            break;
          }
          case 122: {
            clientIdFanoutTarget_.AddEntriesFrom(input, _repeated_clientIdFanoutTarget_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KafkaHeader : pb::IMessage<KafkaHeader> {
    private static readonly pb::MessageParser<KafkaHeader> _parser = new pb::MessageParser<KafkaHeader>(() => new KafkaHeader());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KafkaHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.RpcTypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KafkaHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KafkaHeader(KafkaHeader other) : this() {
      _hasBits0 = other._hasBits0;
      serviceHash_ = other.serviceHash_;
      methodId_ = other.methodId_;
      token_ = other.token_;
      objectId_ = other.objectId_;
      size_ = other.size_;
      status_ = other.status_;
      timeout_ = other.timeout_;
      forwardTarget_ = other.HasForwardTarget ? other.forwardTarget_.Clone() : null;
      returnTopic_ = other.returnTopic_;
      clientId_ = other.clientId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KafkaHeader Clone() {
      return new KafkaHeader(this);
    }

    /// <summary>Field number for the "service_hash" field.</summary>
    public const int ServiceHashFieldNumber = 1;
    private readonly static uint ServiceHashDefaultValue = 0;

    private uint serviceHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceHash {
      get { if ((_hasBits0 & 1) != 0) { return serviceHash_; } else { return ServiceHashDefaultValue; } }
      set {
        _hasBits0 |= 1;
        serviceHash_ = value;
      }
    }
    /// <summary>Gets whether the "service_hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServiceHash {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "service_hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServiceHash() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "method_id" field.</summary>
    public const int MethodIdFieldNumber = 2;
    private readonly static uint MethodIdDefaultValue = 0;

    private uint methodId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MethodId {
      get { if ((_hasBits0 & 2) != 0) { return methodId_; } else { return MethodIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        methodId_ = value;
      }
    }
    /// <summary>Gets whether the "method_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethodId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "method_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethodId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private readonly static uint TokenDefaultValue = 0;

    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { if ((_hasBits0 & 4) != 0) { return token_; } else { return TokenDefaultValue; } }
      set {
        _hasBits0 |= 4;
        token_ = value;
      }
    }
    /// <summary>Gets whether the "token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToken {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 4;
    private readonly static ulong ObjectIdDefaultValue = 0UL;

    private ulong objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjectId {
      get { if ((_hasBits0 & 8) != 0) { return objectId_; } else { return ObjectIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        objectId_ = value;
      }
    }
    /// <summary>Gets whether the "object_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasObjectId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "object_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObjectId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { if ((_hasBits0 & 16) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private readonly static uint StatusDefaultValue = 0;

    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { if ((_hasBits0 & 32) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 32;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatus {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatus() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 7;
    private readonly static ulong TimeoutDefaultValue = 0UL;

    private ulong timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timeout {
      get { if ((_hasBits0 & 64) != 0) { return timeout_; } else { return TimeoutDefaultValue; } }
      set {
        _hasBits0 |= 64;
        timeout_ = value;
      }
    }
    /// <summary>Gets whether the "timeout" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeout {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "timeout" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeout() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "forward_target" field.</summary>
    public const int ForwardTargetFieldNumber = 8;
    private global::Bgs.Protocol.ProcessId forwardTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ProcessId ForwardTarget {
      get { return forwardTarget_; }
      set {
        forwardTarget_ = value;
      }
    }
    /// <summary>Gets whether the forward_target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForwardTarget {
      get { return forwardTarget_ != null; }
    }
    /// <summary>Clears the value of the forward_target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForwardTarget() {
      forwardTarget_ = null;
    }

    /// <summary>Field number for the "return_topic" field.</summary>
    public const int ReturnTopicFieldNumber = 9;
    private readonly static string ReturnTopicDefaultValue = "";

    private string returnTopic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnTopic {
      get { return returnTopic_ ?? ReturnTopicDefaultValue; }
      set {
        returnTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "return_topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReturnTopic {
      get { return returnTopic_ != null; }
    }
    /// <summary>Clears the value of the "return_topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReturnTopic() {
      returnTopic_ = null;
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 11;
    private readonly static string ClientIdDefaultValue = "";

    private string clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_ ?? ClientIdDefaultValue; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientId {
      get { return clientId_ != null; }
    }
    /// <summary>Clears the value of the "client_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientId() {
      clientId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KafkaHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KafkaHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceHash != other.ServiceHash) return false;
      if (MethodId != other.MethodId) return false;
      if (Token != other.Token) return false;
      if (ObjectId != other.ObjectId) return false;
      if (Size != other.Size) return false;
      if (Status != other.Status) return false;
      if (Timeout != other.Timeout) return false;
      if (!object.Equals(ForwardTarget, other.ForwardTarget)) return false;
      if (ReturnTopic != other.ReturnTopic) return false;
      if (ClientId != other.ClientId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServiceHash) hash ^= ServiceHash.GetHashCode();
      if (HasMethodId) hash ^= MethodId.GetHashCode();
      if (HasToken) hash ^= Token.GetHashCode();
      if (HasObjectId) hash ^= ObjectId.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasTimeout) hash ^= Timeout.GetHashCode();
      if (HasForwardTarget) hash ^= ForwardTarget.GetHashCode();
      if (HasReturnTopic) hash ^= ReturnTopic.GetHashCode();
      if (HasClientId) hash ^= ClientId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasServiceHash) {
        output.WriteRawTag(13);
        output.WriteFixed32(ServiceHash);
      }
      if (HasMethodId) {
        output.WriteRawTag(16);
        output.WriteUInt32(MethodId);
      }
      if (HasToken) {
        output.WriteRawTag(24);
        output.WriteUInt32(Token);
      }
      if (HasObjectId) {
        output.WriteRawTag(32);
        output.WriteUInt64(ObjectId);
      }
      if (HasSize) {
        output.WriteRawTag(40);
        output.WriteUInt32(Size);
      }
      if (HasStatus) {
        output.WriteRawTag(48);
        output.WriteUInt32(Status);
      }
      if (HasTimeout) {
        output.WriteRawTag(56);
        output.WriteUInt64(Timeout);
      }
      if (HasForwardTarget) {
        output.WriteRawTag(66);
        output.WriteMessage(ForwardTarget);
      }
      if (HasReturnTopic) {
        output.WriteRawTag(74);
        output.WriteString(ReturnTopic);
      }
      if (HasClientId) {
        output.WriteRawTag(90);
        output.WriteString(ClientId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServiceHash) {
        size += 1 + 4;
      }
      if (HasMethodId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MethodId);
      }
      if (HasToken) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (HasObjectId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjectId);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (HasTimeout) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timeout);
      }
      if (HasForwardTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForwardTarget);
      }
      if (HasReturnTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnTopic);
      }
      if (HasClientId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KafkaHeader other) {
      if (other == null) {
        return;
      }
      if (other.HasServiceHash) {
        ServiceHash = other.ServiceHash;
      }
      if (other.HasMethodId) {
        MethodId = other.MethodId;
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      if (other.HasObjectId) {
        ObjectId = other.ObjectId;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasTimeout) {
        Timeout = other.Timeout;
      }
      if (other.HasForwardTarget) {
        if (!HasForwardTarget) {
          ForwardTarget = new global::Bgs.Protocol.ProcessId();
        }
        ForwardTarget.MergeFrom(other.ForwardTarget);
      }
      if (other.HasReturnTopic) {
        ReturnTopic = other.ReturnTopic;
      }
      if (other.HasClientId) {
        ClientId = other.ClientId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            ServiceHash = input.ReadFixed32();
            break;
          }
          case 16: {
            MethodId = input.ReadUInt32();
            break;
          }
          case 24: {
            Token = input.ReadUInt32();
            break;
          }
          case 32: {
            ObjectId = input.ReadUInt64();
            break;
          }
          case 40: {
            Size = input.ReadUInt32();
            break;
          }
          case 48: {
            Status = input.ReadUInt32();
            break;
          }
          case 56: {
            Timeout = input.ReadUInt64();
            break;
          }
          case 66: {
            if (!HasForwardTarget) {
              ForwardTarget = new global::Bgs.Protocol.ProcessId();
            }
            input.ReadMessage(ForwardTarget);
            break;
          }
          case 74: {
            ReturnTopic = input.ReadString();
            break;
          }
          case 90: {
            ClientId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
