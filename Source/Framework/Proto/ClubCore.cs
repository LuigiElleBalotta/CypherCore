// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/club_core.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Club.V1 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/club_core.proto</summary>
  public static partial class ClubCoreReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/club_core.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClubCoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFiZ3MvbG93L3BiL2NsaWVudC9jbHViX2NvcmUucHJvdG8SFGJncy5wcm90",
            "b2NvbC5jbHViLnYxGiFiZ3MvbG93L3BiL2NsaWVudC9jbHViX2VudW0ucHJv",
            "dG8aIWJncy9sb3cvcGIvY2xpZW50L2NsdWJfcm9sZS5wcm90bxojYmdzL2xv",
            "dy9wYi9jbGllbnQvY2x1Yl9tZW1iZXIucHJvdG8aI2Jncy9sb3cvcGIvY2xp",
            "ZW50L2NsdWJfc3RyZWFtLnByb3RvGjViZ3MvbG93L3BiL2NsaWVudC9hcGkv",
            "Y2xpZW50L3YyL2F0dHJpYnV0ZV90eXBlcy5wcm90bxooYmdzL2xvdy9wYi9j",
            "bGllbnQvZXZlbnRfdmlld190eXBlcy5wcm90byIWCghBdmF0YXJJZBIKCgJp",
            "ZBgBIAEoDSImChNTZXRCcm9hZGNhc3RPcHRpb25zEg8KB2NvbnRlbnQYASAB",
            "KAkibQoJQnJvYWRjYXN0Eg8KB2NvbnRlbnQYASABKAkSOAoHY3JlYXRvchgC",
            "IAEoCzInLmJncy5wcm90b2NvbC5jbHViLnYxLk1lbWJlckRlc2NyaXB0aW9u",
            "EhUKDWNyZWF0aW9uX3RpbWUYAyABKAQiLwoOVW5pcXVlQ2x1YlR5cGUSDwoH",
            "cHJvZ3JhbRgBIAEoBxIMCgRuYW1lGAIgASgJIqQDChFDbHViQ3JlYXRlT3B0",
            "aW9ucxIyCgR0eXBlGAEgASgLMiQuYmdzLnByb3RvY29sLmNsdWIudjEuVW5p",
            "cXVlQ2x1YlR5cGUSLQoJYXR0cmlidXRlGAIgAygLMhouYmdzLnByb3RvY29s",
            "LnYyLkF0dHJpYnV0ZRIMCgRuYW1lGAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQg",
            "ASgJEi4KBmF2YXRhchgFIAEoCzIeLmJncy5wcm90b2NvbC5jbHViLnYxLkF2",
            "YXRhcklkEk8KDXByaXZhY3lfbGV2ZWwYBiABKA4yIi5iZ3MucHJvdG9jb2wu",
            "Y2x1Yi52MS5Qcml2YWN5TGV2ZWw6FFBSSVZBQ1lfTEVWRUxfQ0xPU0VEEhIK",
            "CnNob3J0X25hbWUYByABKAkSOQoGbWVtYmVyGAogASgLMikuYmdzLnByb3Rv",
            "Y29sLmNsdWIudjEuQ3JlYXRlTWVtYmVyT3B0aW9ucxI5CgZzdHJlYW0YCyAB",
            "KAsyKS5iZ3MucHJvdG9jb2wuY2x1Yi52MS5DcmVhdGVTdHJlYW1PcHRpb25z",
            "IpYFCgRDbHViEgoKAmlkGAEgASgEEjIKBHR5cGUYAiABKAsyJC5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5VbmlxdWVDbHViVHlwZRItCglhdHRyaWJ1dGUYAyAD",
            "KAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlEgwKBG5hbWUYBCABKAkS",
            "EwoLZGVzY3JpcHRpb24YBSABKAkSMgoJYnJvYWRjYXN0GAYgASgLMh8uYmdz",
            "LnByb3RvY29sLmNsdWIudjEuQnJvYWRjYXN0Ei4KBmF2YXRhchgHIAEoCzIe",
            "LmJncy5wcm90b2NvbC5jbHViLnYxLkF2YXRhcklkEk8KDXByaXZhY3lfbGV2",
            "ZWwYCCABKA4yIi5iZ3MucHJvdG9jb2wuY2x1Yi52MS5Qcml2YWN5TGV2ZWw6",
            "FFBSSVZBQ1lfTEVWRUxfQ0xPU0VEElkKEHZpc2liaWxpdHlfbGV2ZWwYCSAB",
            "KA4yJS5iZ3MucHJvdG9jb2wuY2x1Yi52MS5WaXNpYmlsaXR5TGV2ZWw6GFZJ",
            "U0lCSUxJVFlfTEVWRUxfUFJJVkFURRIUCgxtZW1iZXJfY291bnQYCiABKA0S",
            "FQoNY3JlYXRpb25fdGltZRgLIAEoBBI9Cg9zdHJlYW1fcG9zaXRpb24YDCAB",
            "KAsyJC5iZ3MucHJvdG9jb2wuY2x1Yi52MS5TdHJlYW1Qb3NpdGlvbhIzCghy",
            "b2xlX3NldBgNIAEoCzIhLmJncy5wcm90b2NvbC5jbHViLnYxLkNsdWJSb2xl",
            "U2V0EjcKBmxlYWRlchgOIAMoCzInLmJncy5wcm90b2NvbC5jbHViLnYxLk1l",
            "bWJlckRlc2NyaXB0aW9uEhIKCnNob3J0X25hbWUYDyABKAkitgMKD0NsdWJE",
            "ZXNjcmlwdGlvbhIKCgJpZBgBIAEoBBIyCgR0eXBlGAIgASgLMiQuYmdzLnBy",
            "b3RvY29sLmNsdWIudjEuVW5pcXVlQ2x1YlR5cGUSDAoEbmFtZRgDIAEoCRIT",
            "CgtkZXNjcmlwdGlvbhgEIAEoCRIuCgZhdmF0YXIYBSABKAsyHi5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5BdmF0YXJJZBJPCg1wcml2YWN5X2xldmVsGAYgASgO",
            "MiIuYmdzLnByb3RvY29sLmNsdWIudjEuUHJpdmFjeUxldmVsOhRQUklWQUNZ",
            "X0xFVkVMX0NMT1NFRBJZChB2aXNpYmlsaXR5X2xldmVsGAcgASgOMiUuYmdz",
            "LnByb3RvY29sLmNsdWIudjEuVmlzaWJpbGl0eUxldmVsOhhWSVNJQklMSVRZ",
            "X0xFVkVMX1BSSVZBVEUSFAoMbWVtYmVyX2NvdW50GAggASgNEjcKBmxlYWRl",
            "chgJIAMoCzInLmJncy5wcm90b2NvbC5jbHViLnYxLk1lbWJlckRlc2NyaXB0",
            "aW9uEhUKDWNyZWF0aW9uX3RpbWUYCiABKAQiRQoIQ2x1YlZpZXcSDwoHY2x1",
            "Yl9pZBgBIAEoBBIoCgZtYXJrZXIYAiABKAsyGC5iZ3MucHJvdG9jb2wuVmll",
            "d01hcmtlciL2AgoQQ2x1YlN0YXRlT3B0aW9ucxItCglhdHRyaWJ1dGUYASAD",
            "KAsyGi5iZ3MucHJvdG9jb2wudjIuQXR0cmlidXRlEgwKBG5hbWUYAiABKAkS",
            "EwoLZGVzY3JpcHRpb24YAyABKAkSPAoJYnJvYWRjYXN0GAQgASgLMikuYmdz",
            "LnByb3RvY29sLmNsdWIudjEuU2V0QnJvYWRjYXN0T3B0aW9ucxIuCgZhdmF0",
            "YXIYBSABKAsyHi5iZ3MucHJvdG9jb2wuY2x1Yi52MS5BdmF0YXJJZBJPCg1w",
            "cml2YWN5X2xldmVsGAYgASgOMiIuYmdzLnByb3RvY29sLmNsdWIudjEuUHJp",
            "dmFjeUxldmVsOhRQUklWQUNZX0xFVkVMX0NMT1NFRBI9Cg9zdHJlYW1fcG9z",
            "aXRpb24YByABKAsyJC5iZ3MucHJvdG9jb2wuY2x1Yi52MS5TdHJlYW1Qb3Np",
            "dGlvbhISCgpzaG9ydF9uYW1lGAggASgJIoADChNDbHViU3RhdGVBc3NpZ25t",
            "ZW50Eg8KB2NsdWJfaWQYASABKAQSLQoJYXR0cmlidXRlGAIgAygLMhouYmdz",
            "LnByb3RvY29sLnYyLkF0dHJpYnV0ZRIMCgRuYW1lGAMgASgJEhMKC2Rlc2Ny",
            "aXB0aW9uGAQgASgJEjIKCWJyb2FkY2FzdBgFIAEoCzIfLmJncy5wcm90b2Nv",
            "bC5jbHViLnYxLkJyb2FkY2FzdBIuCgZhdmF0YXIYBiABKAsyHi5iZ3MucHJv",
            "dG9jb2wuY2x1Yi52MS5BdmF0YXJJZBJPCg1wcml2YWN5X2xldmVsGAcgASgO",
            "MiIuYmdzLnByb3RvY29sLmNsdWIudjEuUHJpdmFjeUxldmVsOhRQUklWQUNZ",
            "X0xFVkVMX0NMT1NFRBI9Cg9zdHJlYW1fcG9zaXRpb24YCCABKAsyJC5iZ3Mu",
            "cHJvdG9jb2wuY2x1Yi52MS5TdHJlYW1Qb3NpdGlvbhISCgpzaG9ydF9uYW1l",
            "GAkgASgJIoQBCg5TdHJlYW1TZXR0aW5ncxIRCglzdHJlYW1faWQYASABKAQS",
            "XwoGZmlsdGVyGAIgASgOMi4uYmdzLnByb3RvY29sLmNsdWIudjEuU3RyZWFt",
            "Tm90aWZpY2F0aW9uRmlsdGVyOh9TVFJFQU1fTk9USUZJQ0FUSU9OX0ZJTFRF",
            "Ul9OT05FIpsBCgxDbHViU2V0dGluZ3MSNAoGc3RyZWFtGAEgAygLMiQuYmdz",
            "LnByb3RvY29sLmNsdWIudjEuU3RyZWFtU2V0dGluZ3MSJgoec3RyZWFtX25v",
            "dGlmaWNhdGlvbl9maWx0ZXJfYWxsGAIgASgIEi0KCWF0dHJpYnV0ZRgDIAMo",
            "CzIaLmJncy5wcm90b2NvbC52Mi5BdHRyaWJ1dGUilgEKE0NsdWJTZXR0aW5n",
            "c09wdGlvbnMSOAoGc3RyZWFtGAEgAygLMiQuYmdzLnByb3RvY29sLmNsdWIu",
            "djEuU3RyZWFtU2V0dGluZ3NCAhgBEjQKCHNldHRpbmdzGAIgASgLMiIuYmdz",
            "LnByb3RvY29sLmNsdWIudjEuQ2x1YlNldHRpbmdzEg8KB3ZlcnNpb24YAyAB",
            "KA0iiAEKFkNsdWJTZXR0aW5nc0Fzc2lnbm1lbnQSOAoGc3RyZWFtGAEgAygL",
            "MiQuYmdzLnByb3RvY29sLmNsdWIudjEuU3RyZWFtU2V0dGluZ3NCAhgBEjQK",
            "CHNldHRpbmdzGAIgASgLMiIuYmdzLnByb3RvY29sLmNsdWIudjEuQ2x1YlNl",
            "dHRpbmdz"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.Club.V1.ClubEnumReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubRoleReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubMemberReflection.Descriptor, global::Bgs.Protocol.Club.V1.ClubStreamReflection.Descriptor, global::Bgs.Protocol.V2.AttributeTypesReflection.Descriptor, global::Bgs.Protocol.EventViewTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.AvatarId), global::Bgs.Protocol.Club.V1.AvatarId.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.SetBroadcastOptions), global::Bgs.Protocol.Club.V1.SetBroadcastOptions.Parser, new[]{ "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Broadcast), global::Bgs.Protocol.Club.V1.Broadcast.Parser, new[]{ "Content", "Creator", "CreationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.UniqueClubType), global::Bgs.Protocol.Club.V1.UniqueClubType.Parser, new[]{ "Program", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubCreateOptions), global::Bgs.Protocol.Club.V1.ClubCreateOptions.Parser, new[]{ "Type", "Attribute", "Name", "Description", "Avatar", "PrivacyLevel", "ShortName", "Member", "Stream" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.Club), global::Bgs.Protocol.Club.V1.Club.Parser, new[]{ "Id", "Type", "Attribute", "Name", "Description", "Broadcast", "Avatar", "PrivacyLevel", "VisibilityLevel", "MemberCount", "CreationTime", "StreamPosition", "RoleSet", "Leader", "ShortName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubDescription), global::Bgs.Protocol.Club.V1.ClubDescription.Parser, new[]{ "Id", "Type", "Name", "Description", "Avatar", "PrivacyLevel", "VisibilityLevel", "MemberCount", "Leader", "CreationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubView), global::Bgs.Protocol.Club.V1.ClubView.Parser, new[]{ "ClubId", "Marker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubStateOptions), global::Bgs.Protocol.Club.V1.ClubStateOptions.Parser, new[]{ "Attribute", "Name", "Description", "Broadcast", "Avatar", "PrivacyLevel", "StreamPosition", "ShortName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubStateAssignment), global::Bgs.Protocol.Club.V1.ClubStateAssignment.Parser, new[]{ "ClubId", "Attribute", "Name", "Description", "Broadcast", "Avatar", "PrivacyLevel", "StreamPosition", "ShortName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.StreamSettings), global::Bgs.Protocol.Club.V1.StreamSettings.Parser, new[]{ "StreamId", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubSettings), global::Bgs.Protocol.Club.V1.ClubSettings.Parser, new[]{ "Stream", "StreamNotificationFilterAll", "Attribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubSettingsOptions), global::Bgs.Protocol.Club.V1.ClubSettingsOptions.Parser, new[]{ "Stream", "Settings", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Club.V1.ClubSettingsAssignment), global::Bgs.Protocol.Club.V1.ClubSettingsAssignment.Parser, new[]{ "Stream", "Settings" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AvatarId : pb::IMessage<AvatarId> {
    private static readonly pb::MessageParser<AvatarId> _parser = new pb::MessageParser<AvatarId>(() => new AvatarId());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvatarId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarId(AvatarId other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarId Clone() {
      return new AvatarId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvatarId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvatarId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvatarId other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetBroadcastOptions : pb::IMessage<SetBroadcastOptions> {
    private static readonly pb::MessageParser<SetBroadcastOptions> _parser = new pb::MessageParser<SetBroadcastOptions>(() => new SetBroadcastOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBroadcastOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBroadcastOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBroadcastOptions(SetBroadcastOptions other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBroadcastOptions Clone() {
      return new SetBroadcastOptions(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBroadcastOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBroadcastOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBroadcastOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Broadcast : pb::IMessage<Broadcast> {
    private static readonly pb::MessageParser<Broadcast> _parser = new pb::MessageParser<Broadcast>(() => new Broadcast());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Broadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast(Broadcast other) : this() {
      _hasBits0 = other._hasBits0;
      content_ = other.content_;
      creator_ = other.HasCreator ? other.creator_.Clone() : null;
      creationTime_ = other.creationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast Clone() {
      return new Broadcast(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private readonly static string ContentDefaultValue = "";

    private string content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.MemberDescription creator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.MemberDescription Creator {
      get { return creator_; }
      set {
        creator_ = value;
      }
    }
    /// <summary>Gets whether the creator field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreator {
      get { return creator_ != null; }
    }
    /// <summary>Clears the value of the creator field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreator() {
      creator_ = null;
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 3;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 1) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Broadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Broadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (!object.Equals(Creator, other.Creator)) return false;
      if (CreationTime != other.CreationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContent) hash ^= Content.GetHashCode();
      if (HasCreator) hash ^= Creator.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasContent) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (HasCreator) {
        output.WriteRawTag(18);
        output.WriteMessage(Creator);
      }
      if (HasCreationTime) {
        output.WriteRawTag(24);
        output.WriteUInt64(CreationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (HasCreator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creator);
      }
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Broadcast other) {
      if (other == null) {
        return;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasCreator) {
        if (!HasCreator) {
          Creator = new global::Bgs.Protocol.Club.V1.MemberDescription();
        }
        Creator.MergeFrom(other.Creator);
      }
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            if (!HasCreator) {
              Creator = new global::Bgs.Protocol.Club.V1.MemberDescription();
            }
            input.ReadMessage(Creator);
            break;
          }
          case 24: {
            CreationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UniqueClubType : pb::IMessage<UniqueClubType> {
    private static readonly pb::MessageParser<UniqueClubType> _parser = new pb::MessageParser<UniqueClubType>(() => new UniqueClubType());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UniqueClubType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueClubType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueClubType(UniqueClubType other) : this() {
      _hasBits0 = other._hasBits0;
      program_ = other.program_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UniqueClubType Clone() {
      return new UniqueClubType(this);
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 1;
    private readonly static uint ProgramDefaultValue = 0;

    private uint program_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Program {
      get { if ((_hasBits0 & 1) != 0) { return program_; } else { return ProgramDefaultValue; } }
      set {
        _hasBits0 |= 1;
        program_ = value;
      }
    }
    /// <summary>Gets whether the "program" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgram {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "program" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgram() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UniqueClubType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UniqueClubType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Program != other.Program) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProgram) hash ^= Program.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProgram) {
        output.WriteRawTag(13);
        output.WriteFixed32(Program);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProgram) {
        size += 1 + 4;
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UniqueClubType other) {
      if (other == null) {
        return;
      }
      if (other.HasProgram) {
        Program = other.Program;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Program = input.ReadFixed32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubCreateOptions : pb::IMessage<ClubCreateOptions> {
    private static readonly pb::MessageParser<ClubCreateOptions> _parser = new pb::MessageParser<ClubCreateOptions>(() => new ClubCreateOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubCreateOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubCreateOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubCreateOptions(ClubCreateOptions other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.HasType ? other.type_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      shortName_ = other.shortName_;
      member_ = other.HasMember ? other.member_.Clone() : null;
      stream_ = other.HasStream ? other.stream_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubCreateOptions Clone() {
      return new ClubCreateOptions(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Bgs.Protocol.Club.V1.UniqueClubType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }
    /// <summary>Gets whether the type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 6;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 1) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 7;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 10;
    private global::Bgs.Protocol.Club.V1.CreateMemberOptions member_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.CreateMemberOptions Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }
    /// <summary>Gets whether the member field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMember {
      get { return member_ != null; }
    }
    /// <summary>Clears the value of the member field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMember() {
      member_ = null;
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 11;
    private global::Bgs.Protocol.Club.V1.CreateStreamOptions stream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.CreateStreamOptions Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }
    /// <summary>Gets whether the stream field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStream {
      get { return stream_ != null; }
    }
    /// <summary>Clears the value of the stream field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStream() {
      stream_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubCreateOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubCreateOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Type, other.Type)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (ShortName != other.ShortName) return false;
      if (!object.Equals(Member, other.Member)) return false;
      if (!object.Equals(Stream, other.Stream)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (HasMember) hash ^= Member.GetHashCode();
      if (HasStream) hash ^= Stream.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteMessage(Type);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (HasAvatar) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasShortName) {
        output.WriteRawTag(58);
        output.WriteString(ShortName);
      }
      if (HasMember) {
        output.WriteRawTag(82);
        output.WriteMessage(Member);
      }
      if (HasStream) {
        output.WriteRawTag(90);
        output.WriteMessage(Stream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (HasMember) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      if (HasStream) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stream);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubCreateOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        if (!HasType) {
          Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        Type.MergeFrom(other.Type);
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      if (other.HasMember) {
        if (!HasMember) {
          Member = new global::Bgs.Protocol.Club.V1.CreateMemberOptions();
        }
        Member.MergeFrom(other.Member);
      }
      if (other.HasStream) {
        if (!HasStream) {
          Stream = new global::Bgs.Protocol.Club.V1.CreateStreamOptions();
        }
        Stream.MergeFrom(other.Stream);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasType) {
              Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 48: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 58: {
            ShortName = input.ReadString();
            break;
          }
          case 82: {
            if (!HasMember) {
              Member = new global::Bgs.Protocol.Club.V1.CreateMemberOptions();
            }
            input.ReadMessage(Member);
            break;
          }
          case 90: {
            if (!HasStream) {
              Stream = new global::Bgs.Protocol.Club.V1.CreateStreamOptions();
            }
            input.ReadMessage(Stream);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Club : pb::IMessage<Club> {
    private static readonly pb::MessageParser<Club> _parser = new pb::MessageParser<Club>(() => new Club());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Club> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Club() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Club(Club other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.HasType ? other.type_.Clone() : null;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      broadcast_ = other.HasBroadcast ? other.broadcast_.Clone() : null;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      visibilityLevel_ = other.visibilityLevel_;
      memberCount_ = other.memberCount_;
      creationTime_ = other.creationTime_;
      streamPosition_ = other.HasStreamPosition ? other.streamPosition_.Clone() : null;
      roleSet_ = other.HasRoleSet ? other.roleSet_.Clone() : null;
      leader_ = other.leader_.Clone();
      shortName_ = other.shortName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Club Clone() {
      return new Club(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.UniqueClubType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }
    /// <summary>Gets whether the type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 6;
    private global::Bgs.Protocol.Club.V1.Broadcast broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Broadcast Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the broadcast field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return broadcast_ != null; }
    }
    /// <summary>Clears the value of the broadcast field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      broadcast_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 7;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 8;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 2) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 9;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 4) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "member_count" field.</summary>
    public const int MemberCountFieldNumber = 10;
    private readonly static uint MemberCountDefaultValue = 0;

    private uint memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { if ((_hasBits0 & 8) != 0) { return memberCount_; } else { return MemberCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        memberCount_ = value;
      }
    }
    /// <summary>Gets whether the "member_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemberCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "member_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemberCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 11;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 16) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "stream_position" field.</summary>
    public const int StreamPositionFieldNumber = 12;
    private global::Bgs.Protocol.Club.V1.StreamPosition streamPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.StreamPosition StreamPosition {
      get { return streamPosition_; }
      set {
        streamPosition_ = value;
      }
    }
    /// <summary>Gets whether the stream_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamPosition {
      get { return streamPosition_ != null; }
    }
    /// <summary>Clears the value of the stream_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamPosition() {
      streamPosition_ = null;
    }

    /// <summary>Field number for the "role_set" field.</summary>
    public const int RoleSetFieldNumber = 13;
    private global::Bgs.Protocol.Club.V1.ClubRoleSet roleSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.ClubRoleSet RoleSet {
      get { return roleSet_; }
      set {
        roleSet_ = value;
      }
    }
    /// <summary>Gets whether the role_set field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoleSet {
      get { return roleSet_ != null; }
    }
    /// <summary>Clears the value of the role_set field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoleSet() {
      roleSet_ = null;
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.MemberDescription> _repeated_leader_codec
        = pb::FieldCodec.ForMessage(114, global::Bgs.Protocol.Club.V1.MemberDescription.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberDescription> leader_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberDescription> Leader {
      get { return leader_; }
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 15;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Club);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Club other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (MemberCount != other.MemberCount) return false;
      if (CreationTime != other.CreationTime) return false;
      if (!object.Equals(StreamPosition, other.StreamPosition)) return false;
      if (!object.Equals(RoleSet, other.RoleSet)) return false;
      if(!leader_.Equals(other.leader_)) return false;
      if (ShortName != other.ShortName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasMemberCount) hash ^= MemberCount.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (HasStreamPosition) hash ^= StreamPosition.GetHashCode();
      if (HasRoleSet) hash ^= RoleSet.GetHashCode();
      hash ^= leader_.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (HasBroadcast) {
        output.WriteRawTag(50);
        output.WriteMessage(Broadcast);
      }
      if (HasAvatar) {
        output.WriteRawTag(58);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(72);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        output.WriteRawTag(80);
        output.WriteUInt32(MemberCount);
      }
      if (HasCreationTime) {
        output.WriteRawTag(88);
        output.WriteUInt64(CreationTime);
      }
      if (HasStreamPosition) {
        output.WriteRawTag(98);
        output.WriteMessage(StreamPosition);
      }
      if (HasRoleSet) {
        output.WriteRawTag(106);
        output.WriteMessage(RoleSet);
      }
      leader_.WriteTo(output, _repeated_leader_codec);
      if (HasShortName) {
        output.WriteRawTag(122);
        output.WriteString(ShortName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasBroadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (HasStreamPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamPosition);
      }
      if (HasRoleSet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleSet);
      }
      size += leader_.CalculateSize(_repeated_leader_codec);
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Club other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        if (!HasType) {
          Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        Type.MergeFrom(other.Type);
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBroadcast) {
        if (!HasBroadcast) {
          Broadcast = new global::Bgs.Protocol.Club.V1.Broadcast();
        }
        Broadcast.MergeFrom(other.Broadcast);
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasMemberCount) {
        MemberCount = other.MemberCount;
      }
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      if (other.HasStreamPosition) {
        if (!HasStreamPosition) {
          StreamPosition = new global::Bgs.Protocol.Club.V1.StreamPosition();
        }
        StreamPosition.MergeFrom(other.StreamPosition);
      }
      if (other.HasRoleSet) {
        if (!HasRoleSet) {
          RoleSet = new global::Bgs.Protocol.Club.V1.ClubRoleSet();
        }
        RoleSet.MergeFrom(other.RoleSet);
      }
      leader_.Add(other.leader_);
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasType) {
              Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (!HasBroadcast) {
              Broadcast = new global::Bgs.Protocol.Club.V1.Broadcast();
            }
            input.ReadMessage(Broadcast);
            break;
          }
          case 58: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 64: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 72: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 80: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 88: {
            CreationTime = input.ReadUInt64();
            break;
          }
          case 98: {
            if (!HasStreamPosition) {
              StreamPosition = new global::Bgs.Protocol.Club.V1.StreamPosition();
            }
            input.ReadMessage(StreamPosition);
            break;
          }
          case 106: {
            if (!HasRoleSet) {
              RoleSet = new global::Bgs.Protocol.Club.V1.ClubRoleSet();
            }
            input.ReadMessage(RoleSet);
            break;
          }
          case 114: {
            leader_.AddEntriesFrom(input, _repeated_leader_codec);
            break;
          }
          case 122: {
            ShortName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubDescription : pb::IMessage<ClubDescription> {
    private static readonly pb::MessageParser<ClubDescription> _parser = new pb::MessageParser<ClubDescription>(() => new ClubDescription());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubDescription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubDescription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubDescription(ClubDescription other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.HasType ? other.type_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      visibilityLevel_ = other.visibilityLevel_;
      memberCount_ = other.memberCount_;
      leader_ = other.leader_.Clone();
      creationTime_ = other.creationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubDescription Clone() {
      return new ClubDescription(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.UniqueClubType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.UniqueClubType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }
    /// <summary>Gets whether the type field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the type field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 6;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 2) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "visibility_level" field.</summary>
    public const int VisibilityLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevelDefaultValue = global::Bgs.Protocol.Club.V1.VisibilityLevel.Private;

    private global::Bgs.Protocol.Club.V1.VisibilityLevel visibilityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.VisibilityLevel VisibilityLevel {
      get { if ((_hasBits0 & 4) != 0) { return visibilityLevel_; } else { return VisibilityLevelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        visibilityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityLevel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "visibility_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityLevel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "member_count" field.</summary>
    public const int MemberCountFieldNumber = 8;
    private readonly static uint MemberCountDefaultValue = 0;

    private uint memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { if ((_hasBits0 & 8) != 0) { return memberCount_; } else { return MemberCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        memberCount_ = value;
      }
    }
    /// <summary>Gets whether the "member_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMemberCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "member_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMemberCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.MemberDescription> _repeated_leader_codec
        = pb::FieldCodec.ForMessage(74, global::Bgs.Protocol.Club.V1.MemberDescription.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberDescription> leader_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberDescription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.MemberDescription> Leader {
      get { return leader_; }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 10;
    private readonly static ulong CreationTimeDefaultValue = 0UL;

    private ulong creationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTime {
      get { if ((_hasBits0 & 16) != 0) { return creationTime_; } else { return CreationTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        creationTime_ = value;
      }
    }
    /// <summary>Gets whether the "creation_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCreationTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "creation_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCreationTime() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubDescription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubDescription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (VisibilityLevel != other.VisibilityLevel) return false;
      if (MemberCount != other.MemberCount) return false;
      if(!leader_.Equals(other.leader_)) return false;
      if (CreationTime != other.CreationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasVisibilityLevel) hash ^= VisibilityLevel.GetHashCode();
      if (HasMemberCount) hash ^= MemberCount.GetHashCode();
      hash ^= leader_.GetHashCode();
      if (HasCreationTime) hash ^= CreationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (HasAvatar) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        output.WriteRawTag(64);
        output.WriteUInt32(MemberCount);
      }
      leader_.WriteTo(output, _repeated_leader_codec);
      if (HasCreationTime) {
        output.WriteRawTag(80);
        output.WriteUInt64(CreationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasVisibilityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityLevel);
      }
      if (HasMemberCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      size += leader_.CalculateSize(_repeated_leader_codec);
      if (HasCreationTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubDescription other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        if (!HasType) {
          Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasVisibilityLevel) {
        VisibilityLevel = other.VisibilityLevel;
      }
      if (other.HasMemberCount) {
        MemberCount = other.MemberCount;
      }
      leader_.Add(other.leader_);
      if (other.HasCreationTime) {
        CreationTime = other.CreationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasType) {
              Type = new global::Bgs.Protocol.Club.V1.UniqueClubType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 48: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 56: {
            VisibilityLevel = (global::Bgs.Protocol.Club.V1.VisibilityLevel) input.ReadEnum();
            break;
          }
          case 64: {
            MemberCount = input.ReadUInt32();
            break;
          }
          case 74: {
            leader_.AddEntriesFrom(input, _repeated_leader_codec);
            break;
          }
          case 80: {
            CreationTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubView : pb::IMessage<ClubView> {
    private static readonly pb::MessageParser<ClubView> _parser = new pb::MessageParser<ClubView>(() => new ClubView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubView(ClubView other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      marker_ = other.HasMarker ? other.marker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubView Clone() {
      return new ClubView(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "marker" field.</summary>
    public const int MarkerFieldNumber = 2;
    private global::Bgs.Protocol.ViewMarker marker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.ViewMarker Marker {
      get { return marker_; }
      set {
        marker_ = value;
      }
    }
    /// <summary>Gets whether the marker field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarker {
      get { return marker_ != null; }
    }
    /// <summary>Clears the value of the marker field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarker() {
      marker_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if (!object.Equals(Marker, other.Marker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      if (HasMarker) hash ^= Marker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      if (HasMarker) {
        output.WriteRawTag(18);
        output.WriteMessage(Marker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      if (HasMarker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Marker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubView other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      if (other.HasMarker) {
        if (!HasMarker) {
          Marker = new global::Bgs.Protocol.ViewMarker();
        }
        Marker.MergeFrom(other.Marker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasMarker) {
              Marker = new global::Bgs.Protocol.ViewMarker();
            }
            input.ReadMessage(Marker);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubStateOptions : pb::IMessage<ClubStateOptions> {
    private static readonly pb::MessageParser<ClubStateOptions> _parser = new pb::MessageParser<ClubStateOptions>(() => new ClubStateOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubStateOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateOptions(ClubStateOptions other) : this() {
      _hasBits0 = other._hasBits0;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      broadcast_ = other.HasBroadcast ? other.broadcast_.Clone() : null;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      streamPosition_ = other.HasStreamPosition ? other.streamPosition_.Clone() : null;
      shortName_ = other.shortName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateOptions Clone() {
      return new ClubStateOptions(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 4;
    private global::Bgs.Protocol.Club.V1.SetBroadcastOptions broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.SetBroadcastOptions Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the broadcast field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return broadcast_ != null; }
    }
    /// <summary>Clears the value of the broadcast field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      broadcast_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 6;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 1) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stream_position" field.</summary>
    public const int StreamPositionFieldNumber = 7;
    private global::Bgs.Protocol.Club.V1.StreamPosition streamPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.StreamPosition StreamPosition {
      get { return streamPosition_; }
      set {
        streamPosition_ = value;
      }
    }
    /// <summary>Gets whether the stream_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamPosition {
      get { return streamPosition_ != null; }
    }
    /// <summary>Clears the value of the stream_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamPosition() {
      streamPosition_ = null;
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 8;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubStateOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubStateOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (!object.Equals(StreamPosition, other.StreamPosition)) return false;
      if (ShortName != other.ShortName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasStreamPosition) hash ^= StreamPosition.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasBroadcast) {
        output.WriteRawTag(34);
        output.WriteMessage(Broadcast);
      }
      if (HasAvatar) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        output.WriteRawTag(58);
        output.WriteMessage(StreamPosition);
      }
      if (HasShortName) {
        output.WriteRawTag(66);
        output.WriteString(ShortName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasBroadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamPosition);
      }
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubStateOptions other) {
      if (other == null) {
        return;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBroadcast) {
        if (!HasBroadcast) {
          Broadcast = new global::Bgs.Protocol.Club.V1.SetBroadcastOptions();
        }
        Broadcast.MergeFrom(other.Broadcast);
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasStreamPosition) {
        if (!HasStreamPosition) {
          StreamPosition = new global::Bgs.Protocol.Club.V1.StreamPosition();
        }
        StreamPosition.MergeFrom(other.StreamPosition);
      }
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (!HasBroadcast) {
              Broadcast = new global::Bgs.Protocol.Club.V1.SetBroadcastOptions();
            }
            input.ReadMessage(Broadcast);
            break;
          }
          case 42: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 48: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 58: {
            if (!HasStreamPosition) {
              StreamPosition = new global::Bgs.Protocol.Club.V1.StreamPosition();
            }
            input.ReadMessage(StreamPosition);
            break;
          }
          case 66: {
            ShortName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubStateAssignment : pb::IMessage<ClubStateAssignment> {
    private static readonly pb::MessageParser<ClubStateAssignment> _parser = new pb::MessageParser<ClubStateAssignment>(() => new ClubStateAssignment());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubStateAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateAssignment(ClubStateAssignment other) : this() {
      _hasBits0 = other._hasBits0;
      clubId_ = other.clubId_;
      attribute_ = other.attribute_.Clone();
      name_ = other.name_;
      description_ = other.description_;
      broadcast_ = other.HasBroadcast ? other.broadcast_.Clone() : null;
      avatar_ = other.HasAvatar ? other.avatar_.Clone() : null;
      privacyLevel_ = other.privacyLevel_;
      streamPosition_ = other.HasStreamPosition ? other.streamPosition_.Clone() : null;
      shortName_ = other.shortName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubStateAssignment Clone() {
      return new ClubStateAssignment(this);
    }

    /// <summary>Field number for the "club_id" field.</summary>
    public const int ClubIdFieldNumber = 1;
    private readonly static ulong ClubIdDefaultValue = 0UL;

    private ulong clubId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClubId {
      get { if ((_hasBits0 & 1) != 0) { return clubId_; } else { return ClubIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        clubId_ = value;
      }
    }
    /// <summary>Gets whether the "club_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClubId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "club_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClubId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 5;
    private global::Bgs.Protocol.Club.V1.Broadcast broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.Broadcast Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }
    /// <summary>Gets whether the broadcast field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBroadcast {
      get { return broadcast_ != null; }
    }
    /// <summary>Clears the value of the broadcast field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBroadcast() {
      broadcast_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 6;
    private global::Bgs.Protocol.Club.V1.AvatarId avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.AvatarId Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }
    /// <summary>Gets whether the avatar field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvatar {
      get { return avatar_ != null; }
    }
    /// <summary>Clears the value of the avatar field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvatar() {
      avatar_ = null;
    }

    /// <summary>Field number for the "privacy_level" field.</summary>
    public const int PrivacyLevelFieldNumber = 7;
    private readonly static global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevelDefaultValue = global::Bgs.Protocol.Club.V1.PrivacyLevel.Closed;

    private global::Bgs.Protocol.Club.V1.PrivacyLevel privacyLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.PrivacyLevel PrivacyLevel {
      get { if ((_hasBits0 & 2) != 0) { return privacyLevel_; } else { return PrivacyLevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        privacyLevel_ = value;
      }
    }
    /// <summary>Gets whether the "privacy_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrivacyLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "privacy_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrivacyLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "stream_position" field.</summary>
    public const int StreamPositionFieldNumber = 8;
    private global::Bgs.Protocol.Club.V1.StreamPosition streamPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.StreamPosition StreamPosition {
      get { return streamPosition_; }
      set {
        streamPosition_ = value;
      }
    }
    /// <summary>Gets whether the stream_position field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamPosition {
      get { return streamPosition_ != null; }
    }
    /// <summary>Clears the value of the stream_position field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamPosition() {
      streamPosition_ = null;
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 9;
    private readonly static string ShortNameDefaultValue = "";

    private string shortName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortName {
      get { return shortName_ ?? ShortNameDefaultValue; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "short_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShortName {
      get { return shortName_ != null; }
    }
    /// <summary>Clears the value of the "short_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShortName() {
      shortName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubStateAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubStateAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClubId != other.ClubId) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (PrivacyLevel != other.PrivacyLevel) return false;
      if (!object.Equals(StreamPosition, other.StreamPosition)) return false;
      if (ShortName != other.ShortName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClubId) hash ^= ClubId.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasBroadcast) hash ^= Broadcast.GetHashCode();
      if (HasAvatar) hash ^= Avatar.GetHashCode();
      if (HasPrivacyLevel) hash ^= PrivacyLevel.GetHashCode();
      if (HasStreamPosition) hash ^= StreamPosition.GetHashCode();
      if (HasShortName) hash ^= ShortName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClubId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClubId);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (HasBroadcast) {
        output.WriteRawTag(42);
        output.WriteMessage(Broadcast);
      }
      if (HasAvatar) {
        output.WriteRawTag(50);
        output.WriteMessage(Avatar);
      }
      if (HasPrivacyLevel) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        output.WriteRawTag(66);
        output.WriteMessage(StreamPosition);
      }
      if (HasShortName) {
        output.WriteRawTag(74);
        output.WriteString(ShortName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClubId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClubId);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasBroadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (HasAvatar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasPrivacyLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivacyLevel);
      }
      if (HasStreamPosition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StreamPosition);
      }
      if (HasShortName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubStateAssignment other) {
      if (other == null) {
        return;
      }
      if (other.HasClubId) {
        ClubId = other.ClubId;
      }
      attribute_.Add(other.attribute_);
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBroadcast) {
        if (!HasBroadcast) {
          Broadcast = new global::Bgs.Protocol.Club.V1.Broadcast();
        }
        Broadcast.MergeFrom(other.Broadcast);
      }
      if (other.HasAvatar) {
        if (!HasAvatar) {
          Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasPrivacyLevel) {
        PrivacyLevel = other.PrivacyLevel;
      }
      if (other.HasStreamPosition) {
        if (!HasStreamPosition) {
          StreamPosition = new global::Bgs.Protocol.Club.V1.StreamPosition();
        }
        StreamPosition.MergeFrom(other.StreamPosition);
      }
      if (other.HasShortName) {
        ShortName = other.ShortName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClubId = input.ReadUInt64();
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (!HasBroadcast) {
              Broadcast = new global::Bgs.Protocol.Club.V1.Broadcast();
            }
            input.ReadMessage(Broadcast);
            break;
          }
          case 50: {
            if (!HasAvatar) {
              Avatar = new global::Bgs.Protocol.Club.V1.AvatarId();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 56: {
            PrivacyLevel = (global::Bgs.Protocol.Club.V1.PrivacyLevel) input.ReadEnum();
            break;
          }
          case 66: {
            if (!HasStreamPosition) {
              StreamPosition = new global::Bgs.Protocol.Club.V1.StreamPosition();
            }
            input.ReadMessage(StreamPosition);
            break;
          }
          case 74: {
            ShortName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamSettings : pb::IMessage<StreamSettings> {
    private static readonly pb::MessageParser<StreamSettings> _parser = new pb::MessageParser<StreamSettings>(() => new StreamSettings());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamSettings(StreamSettings other) : this() {
      _hasBits0 = other._hasBits0;
      streamId_ = other.streamId_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamSettings Clone() {
      return new StreamSettings(this);
    }

    /// <summary>Field number for the "stream_id" field.</summary>
    public const int StreamIdFieldNumber = 1;
    private readonly static ulong StreamIdDefaultValue = 0UL;

    private ulong streamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamId {
      get { if ((_hasBits0 & 1) != 0) { return streamId_; } else { return StreamIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamId_ = value;
      }
    }
    /// <summary>Gets whether the "stream_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private readonly static global::Bgs.Protocol.Club.V1.StreamNotificationFilter FilterDefaultValue = global::Bgs.Protocol.Club.V1.StreamNotificationFilter.None;

    private global::Bgs.Protocol.Club.V1.StreamNotificationFilter filter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.StreamNotificationFilter Filter {
      get { if ((_hasBits0 & 2) != 0) { return filter_; } else { return FilterDefaultValue; } }
      set {
        _hasBits0 |= 2;
        filter_ = value;
      }
    }
    /// <summary>Gets whether the "filter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFilter {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "filter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreamId != other.StreamId) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStreamId) hash ^= StreamId.GetHashCode();
      if (HasFilter) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStreamId) {
        output.WriteRawTag(8);
        output.WriteUInt64(StreamId);
      }
      if (HasFilter) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStreamId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StreamId);
      }
      if (HasFilter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamSettings other) {
      if (other == null) {
        return;
      }
      if (other.HasStreamId) {
        StreamId = other.StreamId;
      }
      if (other.HasFilter) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StreamId = input.ReadUInt64();
            break;
          }
          case 16: {
            Filter = (global::Bgs.Protocol.Club.V1.StreamNotificationFilter) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSettings : pb::IMessage<ClubSettings> {
    private static readonly pb::MessageParser<ClubSettings> _parser = new pb::MessageParser<ClubSettings>(() => new ClubSettings());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettings(ClubSettings other) : this() {
      _hasBits0 = other._hasBits0;
      stream_ = other.stream_.Clone();
      streamNotificationFilterAll_ = other.streamNotificationFilterAll_;
      attribute_ = other.attribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettings Clone() {
      return new ClubSettings(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.StreamSettings> _repeated_stream_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.StreamSettings.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings> stream_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings> Stream {
      get { return stream_; }
    }

    /// <summary>Field number for the "stream_notification_filter_all" field.</summary>
    public const int StreamNotificationFilterAllFieldNumber = 2;
    private readonly static bool StreamNotificationFilterAllDefaultValue = false;

    private bool streamNotificationFilterAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StreamNotificationFilterAll {
      get { if ((_hasBits0 & 1) != 0) { return streamNotificationFilterAll_; } else { return StreamNotificationFilterAllDefaultValue; } }
      set {
        _hasBits0 |= 1;
        streamNotificationFilterAll_ = value;
      }
    }
    /// <summary>Gets whether the "stream_notification_filter_all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStreamNotificationFilterAll {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stream_notification_filter_all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStreamNotificationFilterAll() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.V2.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.V2.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.V2.Attribute> Attribute {
      get { return attribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stream_.Equals(other.stream_)) return false;
      if (StreamNotificationFilterAll != other.StreamNotificationFilterAll) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stream_.GetHashCode();
      if (HasStreamNotificationFilterAll) hash ^= StreamNotificationFilterAll.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stream_.WriteTo(output, _repeated_stream_codec);
      if (HasStreamNotificationFilterAll) {
        output.WriteRawTag(16);
        output.WriteBool(StreamNotificationFilterAll);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stream_.CalculateSize(_repeated_stream_codec);
      if (HasStreamNotificationFilterAll) {
        size += 1 + 1;
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSettings other) {
      if (other == null) {
        return;
      }
      stream_.Add(other.stream_);
      if (other.HasStreamNotificationFilterAll) {
        StreamNotificationFilterAll = other.StreamNotificationFilterAll;
      }
      attribute_.Add(other.attribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stream_.AddEntriesFrom(input, _repeated_stream_codec);
            break;
          }
          case 16: {
            StreamNotificationFilterAll = input.ReadBool();
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSettingsOptions : pb::IMessage<ClubSettingsOptions> {
    private static readonly pb::MessageParser<ClubSettingsOptions> _parser = new pb::MessageParser<ClubSettingsOptions>(() => new ClubSettingsOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSettingsOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsOptions(ClubSettingsOptions other) : this() {
      _hasBits0 = other._hasBits0;
      stream_ = other.stream_.Clone();
      settings_ = other.HasSettings ? other.settings_.Clone() : null;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsOptions Clone() {
      return new ClubSettingsOptions(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.StreamSettings> _repeated_stream_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.StreamSettings.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings> stream_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings> Stream {
      get { return stream_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.ClubSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.ClubSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }
    /// <summary>Gets whether the settings field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettings {
      get { return settings_ != null; }
    }
    /// <summary>Clears the value of the settings field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettings() {
      settings_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private readonly static uint VersionDefaultValue = 0;

    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSettingsOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSettingsOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stream_.Equals(other.stream_)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stream_.GetHashCode();
      if (HasSettings) hash ^= Settings.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stream_.WriteTo(output, _repeated_stream_codec);
      if (HasSettings) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
      if (HasVersion) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stream_.CalculateSize(_repeated_stream_codec);
      if (HasSettings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSettingsOptions other) {
      if (other == null) {
        return;
      }
      stream_.Add(other.stream_);
      if (other.HasSettings) {
        if (!HasSettings) {
          Settings = new global::Bgs.Protocol.Club.V1.ClubSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stream_.AddEntriesFrom(input, _repeated_stream_codec);
            break;
          }
          case 18: {
            if (!HasSettings) {
              Settings = new global::Bgs.Protocol.Club.V1.ClubSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubSettingsAssignment : pb::IMessage<ClubSettingsAssignment> {
    private static readonly pb::MessageParser<ClubSettingsAssignment> _parser = new pb::MessageParser<ClubSettingsAssignment>(() => new ClubSettingsAssignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubSettingsAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Club.V1.ClubCoreReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsAssignment(ClubSettingsAssignment other) : this() {
      stream_ = other.stream_.Clone();
      settings_ = other.HasSettings ? other.settings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubSettingsAssignment Clone() {
      return new ClubSettingsAssignment(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Club.V1.StreamSettings> _repeated_stream_codec
        = pb::FieldCodec.ForMessage(10, global::Bgs.Protocol.Club.V1.StreamSettings.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings> stream_ = new pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Club.V1.StreamSettings> Stream {
      get { return stream_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 2;
    private global::Bgs.Protocol.Club.V1.ClubSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Club.V1.ClubSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }
    /// <summary>Gets whether the settings field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettings {
      get { return settings_ != null; }
    }
    /// <summary>Clears the value of the settings field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettings() {
      settings_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubSettingsAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubSettingsAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stream_.Equals(other.stream_)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stream_.GetHashCode();
      if (HasSettings) hash ^= Settings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      stream_.WriteTo(output, _repeated_stream_codec);
      if (HasSettings) {
        output.WriteRawTag(18);
        output.WriteMessage(Settings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stream_.CalculateSize(_repeated_stream_codec);
      if (HasSettings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubSettingsAssignment other) {
      if (other == null) {
        return;
      }
      stream_.Add(other.stream_);
      if (other.HasSettings) {
        if (!HasSettings) {
          Settings = new global::Bgs.Protocol.Club.V1.ClubSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stream_.AddEntriesFrom(input, _repeated_stream_codec);
            break;
          }
          case 18: {
            if (!HasSettings) {
              Settings = new global::Bgs.Protocol.Club.V1.ClubSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
